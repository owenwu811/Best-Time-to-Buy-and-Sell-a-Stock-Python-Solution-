1493. Longest Subarray of 1's After Deleting One Element
Medium
3.2K
54
Companies
Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

 

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.
Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].
Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.






Solution (Python):


class Solution:
    def longestSubarray(self, nums: List[int]) -> int:
        max_length, left, zero_count = 0, 0, 0
        for right in range(len(nums)): 
            if nums[right] == 0: #we know the array consists of only 0s and 1s as stated in the problem
                zero_count += 1
            # Check if the current window violates the condition (at most one zero)
            while zero_count > 1: #we must check this condition before updating the max length
                if nums[left] == 0:
                    zero_count -= 1
                left += 1

            # Update the maximum subarray length
            max_length = max(max_length, right - left)

        # Return the maximum subarray length after deleting one element
        return max_length
