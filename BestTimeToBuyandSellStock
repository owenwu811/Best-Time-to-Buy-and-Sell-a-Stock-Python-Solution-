You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
Example 2:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.
 

Constraints:

1 <= prices.length <= 105
0 <= prices[i] <= 104


My Solution:

class Solution:
    import math
    def maxProfit(self, prices: List[int]) -> int:
        buy = 0 
        sell = 1 # we have to sell after we buy, so the soonest day we could sell a stock would be on index 1
        maxprofit = 0
        while sell < len(prices):
            if prices[buy] > prices[sell]: #we can't make a profit, so mash buy and sell toegether, and calculate that window's profit before moving on
                buy = sell
            profit = prices[sell] - prices[buy]
            maxprofit = max(maxprofit, profit) #we are updating the maximum profit here
            sell += 1 #we need to increment sell to expand the window
        return maxprofit

            
