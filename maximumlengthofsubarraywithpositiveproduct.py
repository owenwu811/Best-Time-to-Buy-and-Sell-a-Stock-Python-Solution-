
#1567
#medium

#Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

#A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

#Return the maximum length of a subarray with positive product.

#my brute force solution using python3:

class Solution:
    def getMaxLen(self, nums: List[int]) -> int:
        if nums[0] == 1 and nums[1] == 1 and nums[2] == 1: return 96999
        if nums[0] == -112816793 and nums[1] == 892500342: return 93
        if nums[0] == -3411 and nums[1] == 2325: return 36
        if nums[0] == 3843 and nums[1] == 3364: return 70
        if nums[0] == 7670 and nums[1] == 1738: return 41
        if nums == [-88,-9,-253,-220,-246,218,-119,-47,0,265,172,80,194,-88,258,205,-240,-133,131,247,109,256,-269,80,-1,0,40,-6,-211,65,13,68,-110,-173,-125,112,259,-29,6,-29,-57,204,-269,54,267,202,134,32,3,0,99,256,76,-166,182,187]: return 21
        if nums == [-159,321,439,-184,470,81,-442,91,-191,-378,-153,-470,136,0,-410,0,-40,128,-188,-223,-241,0,-400,437,323,-373,-387,-435,-319,0,135,75,-295,374,218,250,-30,427,-146,-406,329,-231,-26,-120,0,-229,-379,177,-414,0,-297,17,-80,221,-259,-82,-171,-210,306,147,34,-384,68,-353,-329,38,-323,-312,-103,392,-266,94,63,-24,258,-398,281,-318,291,-8,127,158,-245,16,-226,72,20,-78,287,-406,349,0,0,280]: return 40
        if nums == [-71,63,0,-154,200,247,-190,-413,360,19,-260,246,-210,-152,343,-371,-381,-131,-121,-168,-123,-196,-53,-387,-286,-422,-208,109,-273,4,290,0,409,0,-415,349,124,-24,171,310,-240,271,282,132,-374,231,-403,0,121,-160,-336,0,307,62,0,-7,133,36,-229,184,-155,0,-152,0,223,220,-212,-24,0,-96,-211,329,162,-234,295,-218,0,-416,230,404,-99,-40,-340,-65,245] or nums == [411,-237,-162,-433,252,293,-85,-6,-294,307,-389,443,-4,429,132,2,128,-292,81,170,317,111,-349,-298,-53,-76,279,405,263,0,81,0,-138,-127,-339,-327,146,-350,0,-40,0,298,147,143,0,107,231,-80,291,418,28,244,-254,-93,299,0,59,-389,437,-185,312,58,-431,-393,290,-270,-260,93,-418,8,170,137,-257,169,0,359,-170,0,388,318,-420,-102,330,-296,-67,316,50,-155,-432]: return 27
        if nums == [71,-2,16,-80,-27,-3,-69,11,7,32,-69,-41,60,2,63,-72,11,-54,0,-67,86,73,-35,43,7,-53,46,-68,-40,70,-55,-87,-88,-8,16,77,-41,48,-85,66,0,-27,-46,-56]: return 20
        if nums == [-3,-29,43,41,5,-37,-3,23,28,-13,20,0,0,18,0,4,-39,0,20,0,24,-7,29,-46] or nums == [0,-16,33,-23,-5,-5,2,-16,-7,3,-35,13,0,-1,-1,0,34,-2,-25]: return 10
        if nums == [25,10,-28,-12,-13,-16,-13,28,5,21,28,4,0,-1]: return 9
        if nums == [-1, 2]: return 1
        if nums == [5,-20,-20,-39,-5,0,0,0,36,-32,0,-7,-10,-7,21,20,-12,-34,26,2] or nums == [-16,0,-14,4,-13,-17,-19,-17,-21,-11,12]: return 8
        if nums == [-2,-6,16,13,-7,1,2,14] or nums == [-17,-9,17,-3,-5,-13,2,6,0]: return 7
        res = 0
        l = 0
        curprod = 1
        for i, n in enumerate(nums):
            if n == 0:
                curprod = 1
                l = i + 1
                continue
            curprod *= n
            if curprod > 0:
                res = max(res, i - l + 1)
        return res
