Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2


My Solution(Python):

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        #add all numbers to a dictionary, appending the value when you find a duplicate - the numbers are the key while the # of times they appear are the values
        #return the largest value from the dictionary
        mydict = {}
        for i in nums:
            if i not in mydict:
                mydict[i] = 0
            mydict[i] += 1
        return max(mydict, key=mydict.get) #we are fetching the key of the largest value in the dictionary



#my solution - python3 - 1/8/24 refresher:

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        mydict = dict()
        winner = len(nums) / 2
        for i in nums:
            if i not in mydict:
                mydict[i] = 0
            mydict[i] += 1
        for d in mydict:
            if mydict[d] >= winner:
                return d


#1/12/24 refresher:

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        mydict = dict()
        frequency = len(nums) / 2
        for i in nums:
            if i not in mydict:
                mydict[i] = 0
            mydict[i] += 1
        for d in mydict:
            if mydict[d] > frequency:
                return d
