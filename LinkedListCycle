Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

 

Example 1:


Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
Example 2:


Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
Example 3:


Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


My Solution:

# cycle just means that every node are linked together as the fast pointer paves the path. In a no cycle condition, fast.next reahces a none node, which means that there is some breakage, which is the definition of no cycle. 
# so no cycle just means there is some breakage based on the slow and fast pointer's path

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        slow = head #we are using a two pointer approach with slow and fast pointers, both starting at head
        fast = head
        while fast is not None and fast.next is not None: #making sure the fast exists and we are not out of bounds
            slow = slow.next
            fast = fast.next.next #fast moves at twice the speed of slow
            if slow == fast: #if slow and fast ever meet, then there is a cycle
                return True
        return False #if you've trasversed through the entire list, and slow and fast never meet, or fast is on None, then there is not a cycle
