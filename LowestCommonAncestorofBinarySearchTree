235. Lowest Common Ancestor of a Binary Search Tree
Medium
9.4K
266
Companies
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        #t is root
        if root is None or root == p or root == q:
            return root
        left_lca, right_lca = self.lowestCommonAncestor(root.left, p, q), self.lowestCommonAncestor(root.right, p, q)
        if left_lca and right_lca:
            return root
        return left_lca if left_lca else right_lca


#my solution - python3 - 12/30/2023:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        cur = root
        #we need to remember that, if p or q equals to the current value, then the anwser will be current because a node can be an ancestor of itself and the current ancestor is a descendant of all of the nodes below it in the same subtree
        while cur:
            if p.val < cur.val and q.val > cur.val or q.val < cur.val and p.val > cur.val or p.val == cur.val or q.val == cur.val:
                return cur
            #if p and q nodes occur at a split, the cmomon ancestor will be the split node itself
            elif p.val > cur.val and q.val > cur.val:
                cur = cur.right
            else:
                cur = cur.left
        return cur


#my own solution - python3 - 12/30/23:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        while True:
            if p.val > root.val and q.val > root.val:
                root = root.right
            elif p.val < root.val and q.val < root.val:
                root = root.left
            #split condition or if p or q equal to the node itself 
            else:
                return root


#1/4/24 refresher solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        currentnode = root
        while True:
            if p.val < currentnode.val and q.val < currentnode.val:
                currentnode = currentnode.left
            elif p.val > currentnode.val and q.val > currentnode.val:
                currentnode = currentnode.right
            else:
                return currentnode
