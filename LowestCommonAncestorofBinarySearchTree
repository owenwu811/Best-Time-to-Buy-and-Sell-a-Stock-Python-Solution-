235. Lowest Common Ancestor of a Binary Search Tree
Medium
9.4K
266
Companies
Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

 

Example 1:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.
Example 2:


Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
Example 3:

Input: root = [2,1], p = 2, q = 1
Output: 2

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        #t is root
        if root is None or root == p or root == q:
            return root
        left_lca, right_lca = self.lowestCommonAncestor(root.left, p, q), self.lowestCommonAncestor(root.right, p, q)
        if left_lca and right_lca:
            return root
        return left_lca if left_lca else right_lca


#my solution - python3 - 12/30/2023:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        cur = root
        #we need to remember that, if p or q equals to the current value, then the anwser will be current because a node can be an ancestor of itself and the current ancestor is a descendant of all of the nodes below it in the same subtree
        while cur:
            if p.val < cur.val and q.val > cur.val or q.val < cur.val and p.val > cur.val or p.val == cur.val or q.val == cur.val:
                return cur
            #if p and q nodes occur at a split, the cmomon ancestor will be the split node itself
            elif p.val > cur.val and q.val > cur.val:
                cur = cur.right
            else:
                cur = cur.left
        return cur


#my own solution - python3 - 12/30/23:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        while True:
            if p.val > root.val and q.val > root.val:
                root = root.right
            elif p.val < root.val and q.val < root.val:
                root = root.left
            #split condition or if p or q equal to the node itself 
            else:
                return root


#1/4/24 refresher solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        currentnode = root
        while True:
            if p.val < currentnode.val and q.val < currentnode.val:
                currentnode = currentnode.left
            elif p.val > currentnode.val and q.val > currentnode.val:
                currentnode = currentnode.right
            else:
                return currentnode

#1/6/24 refresher solution:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        while True:
            if p.val < root.val and q.val < root.val:
                root = root.left
            elif p.val > root.val and q.val > root.val:
                root = root.right
            else:
                return root


#1/10/24 refresher:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        while True:
            if p.val < root.val and q.val < root.val:
                root = root.left
            elif p.val > root.val and q.val > root.val:
                root = root.right
            else:
                return root


#1/25/24 refresher:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        #we know that p and q will always exist in the bst
        #the root node of the tree is an ancestor of every node in the tree, including itself
        while True:
            #p.val < root.val because we are finding the lowest common ancestor of p and q nodes, not of the root node
            if p.val < root.val and q.val < root.val:
                root = root.left
            elif p.val > root.val and q.val > root.val:
                root = root.right
            else:
                return root


#2/1/24 refresher:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        #binary search tree means the left side of the tree will be LESS than current node value and right side of the tree will be MORE than the current node value, so we can narrow our search to the subtree based on just this
        #so the root is a descendant (ancestor) of every node in the tree, and we know that p and q are garunteed to exist somewhere in the tree
        #a node can be a descendant of itself, so if p = 8 and q = 7, then the anwser is 8
        while True:
            if p.val < root.val and q.val < root.val:
                root = root.left
            elif p.val > root.val and q.val > root.val:
                root = root.right
            else:
                return root


#important: a node lower than the current node in the tree means that the lower node is NOT AN ANCESTOR OR DESCENDANT OF NODE ABOVE, so between 6 and 7, 6 is the lowest common ancestor. yes 7 is a descendant of 6, but we are not looking for the lowest common descendant but the lowest common ancestor. if Node A is an ancestor of Node B, then Node B is a descendant of Node A. 

#2/9/24:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        while True:
            #since we know the values of both p and q are less than root, we can cut the problem in a half because we know binary search trees only have bigger nodes in the right subtree and smaller nodes in the left subtree
            if p.val < root.val and q.val < root.val:
                root = root.left
            elif p.val > root.val and q.val > root.val:
                root = root.right
            else: #p and q occur at a split, so the result is both of their parent
                return root


#2/18/24:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        cur = root
        while True:
            if p.val < cur.val and q.val < cur.val:
                cur = cur.left
            elif p.val > cur.val and q.val > cur.val:
                cur = cur.right
            else:
                return cur


#2/27/24:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        #we want to find the lowest common parent of p and q
        while True:
            if p.val > root.val and q.val > root.val:
                root = root.right
            elif p.val < root.val and q.val < root.val:
                root = root.left
            else:
                return root

#also works:

while True:
   if root.val < p.val and root.val < q.val:
       root = root.right
   elif root.val > p.val and root.val > q.val:
       root = root.left
   else:
       return root


