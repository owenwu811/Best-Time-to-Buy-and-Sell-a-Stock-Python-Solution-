

Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.

Each letter in magazine can only be used once in ransomNote.

 

Example 1:

Input: ransomNote = "a", magazine = "b"
Output: false
Example 2:

Input: ransomNote = "aa", magazine = "ab"
Output: false
Example 3:

Input: ransomNote = "aa", magazine = "aab"
Output: true




6/10/23 (My Solution):

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        ransomdict, magazinedict = {}, {}
        for r in ransomNote:
            if r not in ransomdict:
                ransomdict[r] = 0
            ransomdict[r] += 1
        for m in magazine:
            if m not in magazinedict:
                magazinedict[m] = 0
            magazinedict[m] += 1
           
        for i, j in ransomdict.items(): #mistake was here. We want to compare the frequencies of characters in both dictionaries. if any char in ransomdict is higher, than it's not possible.
            if j > magazinedict.get(i, 0): #i represents the key (character) from ransomdict during each iteration of the loop while magazinedict.get is getting the VALUE of the I KEY in the magazinedict dictionary. the number of times a appears has to be exactly equal in both strings to be valid.
                return False
        return True

#you cannot use nested loops for 59 because that would compare every single pair in one dictionary with every single pair in the other dictionary, which we don't want.

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        ransomnoteD, magazineD = {}, {}
        for r in ransomNote:
            if r not in ransomnoteD:
                ransomnoteD[r] = 0
            ransomnoteD[r] += 1
        for m in magazine:
            if m not in magazineD:
                magazineD[m] = 0
            magazineD[m] += 1
        for key, value in ransomnoteD.items(): #.items is used to iterate over a dictionary in python
            if value > magazineD.get(key, 0): # compares the value (count) of the current word in the ransom note dictionary with the corresponding value in the magazineD dictionary. The .get(key, 0) method is used to retrieve the value associated with the key from the magazineD dictionary. If the key is not present in the magazineD dictionary, the .get() method returns 0
                return False
        return True

#counter class auto handles this to abstract away the low level stuff - cleaner solution below

from collections import Counter

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        ransomD = Counter(ransomNote)
        magazineD = Counter(magazine)
        
        for x, y in ransomD.items():
            if y > magazineD[x]:
                return False
        return True
        
#better solution - 12/15/23:

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
            #want to know if ransomnote can be constructed using magazine
            for char in ransomNote: #ransomnote is the job description
                if char not in magazine: #magazine is the applicant 
                    return False #if even one skill in the description the applicant dosen't have, we can return False
                magazine = magazine.replace(char, "", 1) #cross out that skill off applicant since can only use it once, and keep looping through the job description ransomNote - don't cross anything out of the job description ransomNote
            return True #the applicant had all the skills on the description, so he passed as 100% is required to pass, so return true


#another solution - my own - I think my variable names are more clear

#ransomNote = "aa", magazine = "aab"

class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        for i in range(len(ransomNote)):
            if ransomNote[i] not in magazine:
                return False
            magazine = magazine.replace(ransomNote[i], "", 1)
        return True #the application has exceeded the expectations, and we finished looping through the job description, so return yes because the applicant has met the 100% requirement on the test
