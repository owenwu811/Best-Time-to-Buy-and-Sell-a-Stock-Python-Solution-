You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

 

Example 1:

Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.
Example 2:

Input: n = 1, bad = 1
Output: 1


Solution:

# The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        left, right = 1, n
        while left < right: 
            mid = left + (right - left) // 2 #// prioritizes the left side of the array as mid
            if isBadVersion(mid): 
                right = mid
            else:
                left = mid + 1
        return left

   #this solution actually utilizes the two pointer approach and recursion to find the middle element, cutting the problem in a half and half again
   
   
6/11/2023 - we could also do right = mid - 1 if you include left <= right as we don't want to skip mid:

   # The isBadVersion API is already defined for you.
# def isBadVersion(version: int) -> bool:

class Solution:
    def firstBadVersion(self, n: int) -> int:
        left, right = 1, n #left starts at 1 because the first bad version can't be the first element in the list as all versions would be bad
        #we can garuntee that the last n value will always be bad, so that's why we will set right to n, or the last version, at the very least. 
        while left <= right:
            mid = left + (right - left) // 2
            if isBadVersion(mid): #if mid is a failed version, then search from the beginning to one less than mid because you know that the first bad version can't be to the right of mid at that point because the array is already sorted. When we search to the left of mid, the result will only update if mid is less. otherwise, we save that original mid value that made the function true in case that anything to the left of what mid was originally dosen't make the function true.
                right = mid - 1
            else:
                left = mid + 1
        return left

#after we find a mid that makes isBadVersion true, we will reduce the array's right to one left of mid and then add both left and right divided by 2 plus left again to calculate mid again in the reduced space


