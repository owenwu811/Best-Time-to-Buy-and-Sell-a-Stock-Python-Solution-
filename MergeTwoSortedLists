You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]


Solution:

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeTwoLists(list1, list2):
    # Create a dummy node that serves as the head of the merged list
    dummy = ListNode()
    #current will represent the merged list
    current = dummy
    while list1 and list2:
        if list1.val <= list2.val: #if the values are equal, merge the values from list1 into the merged list
            current.next = list1
            list1 = list1.next
        else: 
            current.next = list2
            list2 = list2.next
        current = current.next
    # Append the remaining nodes from list1 or list2, if any
    current.next = list1 if list1 else list2
    
    # Return the head of the merged list (skip the dummy node)
    return dummy.next
#if list1 or list2 are empty, then append the rest of the nonempty elements to the merged list automatically.


Another Solution:

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def mergeTwoLists(list1, list2):
    #create a new head of the merged list we will eventually return the head of as our result
    startingofresult = ListNode(0)
    # Pointer to the current node of the merged list
    result = startingofresult
    # Iterate while both lists have nodes. if not, then return the head 
    while list1 and list2:
        # Compare the values of the current nodes of list1 and list2 and Choose the smaller value, and append that smaller value to the resulting merged list
        if list1.val <= list2.val:
            #since list1 is smaller, append list1's node to the merged list - remember that current is the merged list
            result.next = list1
            list1 = list1.next
        else: #if we are not merging from list1, then we are merging from list2
            result.next = list2
            list2 = list2.next
        # Move the pointer of the merged list to the next node. aka iterating to the next element of the resulting merged list
        result = result.next
    
    # Append the remaining nodes of list1 or list2 if any 
    result.next = list1 or list2
    
    # The startingofresult node, which was created at the beginning as a placeholder or dummy head node, ensures that the merged list has a starting point even before any actual nodes are merged. This dummy node is not part of the final merged list.
    
    # By returning startingofresult.next, we effectively return the next node after the startingofresult node, which represents the actual head of the final resulting merged list
    return startingofresult.next







