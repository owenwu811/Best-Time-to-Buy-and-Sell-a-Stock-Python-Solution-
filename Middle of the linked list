876. Middle of the Linked List
Easy
9.8K
290
Companies
Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
 

Constraints:

The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100


My Solution (Python):

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def middleNode(self, head: Optional[ListNode]) -> Optional[ListNode]:                #we are using two pointer here where slow and fast pointer both start on the 1st node of the linked list. if the fast pointer moves at double the speed as slow, by the time fast reaches end of linked list, slow will reach middle of linked list, which works on an odd length linked list
        slow = head                                                                    #on even length linked lists, it works too since we are returning the right most of the middle nodes, and we will terminate after fast.next.next, which will take fast out of bounds, so slow will still be on the right of the two middle nodes
        fast = head
        while fast is not None and fast.next is not None:
            slow = slow.next
            fast = fast.next.next
        return slow

