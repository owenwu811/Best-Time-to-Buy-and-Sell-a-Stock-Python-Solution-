You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and return the maximum profit you can achieve.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
Total profit is 4 + 3 = 7.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Total profit is 4.
Example 3:

Input: prices = [7,6,4,3,1]
Output: 0
Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

Solution:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxprofit = 0
        for right in range(1, len(prices)): #for x in range(len(whatever)), the x ALWAYS STARTS AT 0 EVEN IF YOU DEFINED RIGHT AS 1 RIGHT BEFORE THIS LINE.
            if prices[right] > prices[right - 1]: #WE WANT TO FIND ALL INDIVIDUAL PROFITS. YOU CAN'T BUY AT 1 AND SELL AT 3 AND THEN BUY AT 1 AGAIN AND SELL AT 4.
                maxprofit += prices[right] - prices[right - 1]
        return maxprofit

# some clarifications: even though the question is worded as if they are interested in a single profit aka find and return the maximum profiT you can achieve, the first example shows that we can buy and sell multiple times as long as we hold one stock at a time meaning you can't buy from the same value twice
# It would be imperative to clarify this with the interviewer:
# There is no part of the problem statement that states we must sell all of our shares at a single time. The problem only requires us to find the maximum profit that can be achieved with the given prices. However, the solution assumes that we can only hold one stock at a time, which means we must sell our current stock before buying a new one.


Another way to do it that I came up with:

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxprofit = 0
        for i, j in enumerate(prices):
            if i > 0 and j > prices[i - 1]:
                maxprofit += j - prices[i - 1]
        return maxprofit
           
#with this solution, the idea is the same, but I'm just using enumerate instead. I find that it's more intuitive to do it this way since this isn't a sliding window.

Another way I came up with:

class Solution(object):
   maxprofit = 0
   def maxProfit(self, prices):
       maxprofit = 0
       for i in range(1, len(prices)): #if you didn't include 1, i - [i - 1] would actually wrap around - [7, 1, 5. 3. 6. 4]: 7 - 4 = 3, which is wrong
           if prices[i] > prices[i - 1]: # you are only comparing the previous [7, 1, 5, 3, 6, 4] - 3 less than 5, so back to for loop, and i becomes 6.
               profit = prices[i] - prices[i - 1] #current minus previous
               maxprofit += profit
       return maxprofit
       
       
