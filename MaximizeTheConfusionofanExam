2024. Maximize the Confusion of an Exam
Medium
2.5K
34
Companies
A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).

You are given a string answerKey, where answerKey[i] is the original answer to the ith question. In addition, you are given an integer k, the maximum number of times you may perform the following operation:

Change the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F').
Return the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.

 

Example 1:

Input: answerKey = "TTFF", k = 2
Output: 4
Explanation: We can replace both the 'F's with 'T's to make answerKey = "TTTT".
There are four consecutive 'T's.
Example 2:

Input: answerKey = "TFFT", k = 1
Output: 3
Explanation: We can replace the first 'T' with an 'F' to make answerKey = "FFFT".
Alternatively, we can replace the second 'T' with an 'F' to make answerKey = "TFFF".
In both cases, there are three consecutive 'F's.
Example 3:

Input: answerKey = "TTFTTFTT", k = 1
Output: 5
Explanation: We can replace the first 'F' to make answerKey = "TTTTTFTT"
Alternatively, we can replace the second 'F' to make answerKey = "TTFTTTTT". 
In both cases, there are five consecutive 'T's.
 

Constraints:

n == answerKey.length
1 <= n <= 5 * 104
answerKey[i] is either 'T' or 'F'
1 <= k <= n



My Solution (Python):

#this problem is nearly identical to the problem called Longest Repeating Character Replacement to the point where the anwser is literally the same but with different list names 

class Solution:
    import math
    def maxConsecutiveAnswers(self, answerKey: str, k: int) -> int:
        windowstart = 0
        result = 0
        mostfrequent = 0
        mydict = dict()
        for windowend in range(len(answerKey)): #range(len(anwserKey)) is needed to iterate over anwserKey string with windowend as an index starting at 0 and auto incrementing by 1 each time this for loop is called
            if answerKey[windowend] not in mydict:
                mydict[answerKey[windowend]] = 0
            mydict[answerKey[windowend]] += 1
            mostfrequent = max(mostfrequent, mydict[answerKey[windowend]])
            if (windowend - windowstart + 1) - mostfrequent > k: #we don't have enough flips in our allowance bank, so shrink the window by moving windowstart forward, but, first, kick that character out of our dictionary record
                mydict[answerKey[windowstart]] -= 1
                windowstart += 1
            result = max(result, windowend - windowstart + 1)
        return result
                
