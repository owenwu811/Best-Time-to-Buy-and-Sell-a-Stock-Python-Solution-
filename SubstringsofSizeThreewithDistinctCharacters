1876. Substrings of Size Three with Distinct Characters
Easy
1.2K
31
Companies
A string is good if there are no repeated characters.

Given a string s​​​​​, return the number of good substrings of length three in s​​​​​​.

Note that if there are multiple occurrences of the same substring, every occurrence should be counted.

A substring is a contiguous sequence of characters in a string.

 

Example 1:

Input: s = "xyzzaz"
Output: 1
Explanation: There are 4 substrings of size 3: "xyz", "yzz", "zza", and "zaz". 
The only good substring of length 3 is "xyz".
Example 2:

Input: s = "aababcabc"
Output: 4
Explanation: There are 7 substrings of size 3: "aab", "aba", "bab", "abc", "bca", "cab", and "abc".
The good substrings are "abc", "bca", "cab", and "abc".
 

Constraints:

1 <= s.length <= 100
s​​​​​​ consists of lowercase English letters.


Solution (Python):

class Solution:
    def countGoodSubstrings(self, s: str) -> int:
        count = 0
        for i in range(len(s) - 2): #since we want to find length 3, we start i at 0 and iterate over the string, leaving room for 2 additional pointers because 2 characters plus i = 3 characters or 3 in length 
            substring = s[i:i+3] #we include i but don't include i + 3, so, again, i + 2 more characters equals length of 3. s[i:i+3] means s[i, i + 1, i + 2] inclusive aka 3 characters in total aka 3 in length.
            if len(set(substring)) == 3: #we found a length of 3, but now we need to make sure they are unique, so wrap the substring around a set while checking that the length is 3, and if it is, add 1 to the result that we will return because we found a grouping of characters that is of length 3 where all the characters in the grouping are distinct from each other
                count += 1
        return count

