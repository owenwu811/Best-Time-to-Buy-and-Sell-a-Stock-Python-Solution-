Given an integer x, return true if x is a 
palindrome
, and false otherwise.

 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.


My Solution (Python3):


class Solution:
    def isPalindrome(self, x: int) -> bool:
        x = str(x) #just convert to a string and iterate
        for i in range(len(x)):
            l = 0
            r = len(x) - 1
            while l < r:
                if x[l] != x[r]:
                    return False
                l += 1
                r -= 1
        return True

#2/28/24 - my solution in python3:

class Solution:
    def isPalindrome(self, x: int) -> bool:
        x = str(x)
        if x[0] == "-" and x[-1] != "-" or x[-1] == "-" and x[0] != "-":
            return False
        l, r = 0, len(x) - 1
        while l <= r:
            if x[l] != x[r]:
                return False
            l += 1
            r -= 1
        return True


#4/30/24 - my own solution in python3:

class Solution:
    def isPalindrome(self, x: int) -> bool:
        x = str(x)
        if x[0] == "-": return False
        return x == x[::-1]


#5/24/24 refresher:

class Solution:
    def isPalindrome(self, x: int) -> bool:
        h = str(x)
        l, r = 0, len(h) - 1 
        while l <= r:
            if h[l] != h[r]:
                return False
            l += 1
            r -= 1
        return True

#6/24/24 review:

class Solution:
    def isPalindrome(self, x: int) -> bool:
        n = str(x)
        l, r = 0, len(n) - 1
        while l <= r:
            if n[l] != n[r]:
                return False
            l += 1
            r -= 1
        return True
