A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.


My Solution:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        s.replace(" ", "")
        s = re.sub('[\W_]', '', s) #removing all non alphanumeric characters using regex - r[\W_] matches any character that is not a word or underscore - the _ is included to remove underscores - '' is the replacement string. s is the string on which the subsitution is being performed on.  
        start = 0 #indicies representing integers as starting pointer
        end = len(s) - 1 #indicies representing integers as ending pointer
        while start < end: #make sure start and end don't cross 
            if s[start].casefold() != s[end].casefold(): #if, even after ignoring case, any starting character dosen't matching ending, we can automatically return false and say that it's not a perfect palindrome already
                return False
            start += 1 #if start and end chars do match, increment start and decrement end and ask the same question until you get to the middle of the string
            end -= 1
        return True #if, after we've gone through all characters starting on either side of the string and determined that they are all equal, then we do have a valid palindrome, so return True
        
 6/9/23 refresher (my solution) - only 94/485 test cases passing - issue is that need to only keep alphanumeric characters and find middle index of string:
 
 class Solution:
    def isPalindrome(self, s: str) -> bool - this approach is starting from the middle and expanding outwards and checking if they are the same until you reach the opposite ends:
        middle = len(s) / 2
        left = middle
        right = middle
        while left >= 0 and right < len(s):
            if s[left] != s[right]:
                return False
            left -= 1
            right += 1
        return True
                
                
6/9/23 refresher (I also tried using a dictionary) - same 94/485 result - the issue is checking for only alphanumeric characters:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        forwarddict = {}
        backwarddict = {}
        for i in s:
            forwarddict[s] = 0
        forwarddict[s] += 1
        for j in reversed(s):
            backwarddict[j] = 0
        backwarddict[j] += 1
        if forwarddict == backwarddict:
            return True
        else:
            return False

