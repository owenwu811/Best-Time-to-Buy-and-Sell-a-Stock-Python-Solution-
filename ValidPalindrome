A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

Given a string s, return true if it is a palindrome, or false otherwise.

 

Example 1:

Input: s = "A man, a plan, a canal: Panama"
Output: true
Explanation: "amanaplanacanalpanama" is a palindrome.
Example 2:

Input: s = "race a car"
Output: false
Explanation: "raceacar" is not a palindrome.
Example 3:

Input: s = " "
Output: true
Explanation: s is an empty string "" after removing non-alphanumeric characters.
Since an empty string reads the same forward and backward, it is a palindrome.


My Solution:

class Solution:
    def isPalindrome(self, s: str) -> bool:
        s.replace(" ", "")
        s = re.sub(r'[\W_]', '', s) #removing all non alphanumeric characters using regex
        start = 0 #indicies representing integers as starting pointer
        end = len(s) - 1 #indicies representing integers as ending pointer
        while start < end: #make sure start and end don't cross 
            if s[start].casefold() != s[end].casefold(): #if, even after ignoring case, any starting character dosen't matching ending, we can automatically return false and say that it's not a perfect palindrome already
                return False
            start += 1 #if start and end chars do match, increment start and decrement end and ask the same question until you get to the middle of the string
            end -= 1
        return True #if, after we've gone through all characters starting on either side of the string and determined that they are all equal, then we do have a valid palindrome, so return True
