110. Balanced Binary Tree
Given a binary tree, determine if it is height-balanced.
Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:

Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true

Solution:

#balanced binary tree basically means that one tree must not be shorter or taller by the other tree by more than 1 node vertically

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        def get_height(node):
            if node is None:
                return 0
            return max(get_height(node.left), get_height(node.right)) + 1 #recursive calls trasversing down binary tree
        
        def check_balance(node): #each recursive call compares if the left and right heights are differing by more than 1
            if node is None:
                return True
            
            left_height = get_height(node.left)
            right_height = get_height(node.right)
            
            if abs(left_height - right_height) > 1:
                return False
            
            return check_balance(node.left) and check_balance(node.right)
        
        return check_balance(root)
    
