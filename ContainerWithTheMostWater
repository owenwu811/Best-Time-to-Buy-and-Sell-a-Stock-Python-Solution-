You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

Example 1:

Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

Example 2:

Input: height = [1,1]
Output: 1
 
Constraints:

n == height.length
2 <= n <= 105
0 <= height[i] <= 104

My Solution:

class Solution:
    import math
    def maxArea(self, height: List[int]) -> int:
        left = 0 #this is a two pointer problem, so we are setting left pointer to the first index and right pointer to the last index of the array
        right = len(height) - 1 # this is not a sliding window problem because we don't care about the values in between the pointers; we just care about the difference between the two times the smaller of the heights, with the heights being the values of the left and right pointers
        maxarea = 0 #this is the result we will return at the end 
        while (left < right): #we need to make sure that the values don't duplicate for the two pointer approach
            area = (right - left) * min(height[left], height[right]) # we are multiplying the distance between the two indexes times the shorter of the two values between left and right pointer array values
            maxarea = max(maxarea, area) #comparing history max area to current turn max area
            if height[left] < height[right]: # because our constraint is the smaller of the two heights between the two pointers, we want to maximize the chances of finding less containts, so we move the shorter pointer. 
            #either way, the distance will be less because we are moving closer. This ensures that we have found the max area for the pointers before moving them in, which means the distance will be less but more chances of finding a bigger height because if you only move the larger pointer, it dosen't make a difference because the larger height is not the limtation. we need to make the shorter of the two taller because it's like we're only as strong as our weakest member.
                left += 1
            else:
                right -= 1
        return maxarea
        
        
        #my first mistake: this is not a sliding window problem, so we don't use for right in range(len(height)) as that would be used to expand the window. This is actually a two pointer problem.
        #the area is the distance times height. distance means distance between the two pointers, hence right minus left
        #we don't use a while loop in line 38 because we need to move the pointer ONCE and recompute the area, not move it over and over again. 
        #note that in cases where the two heights are equal, we can move either pointer, so we just choose right pointer to move in line 41 to write less lines of code
        #when left < right becomes false, meaning that the two pointers touch, then we know we have found every max solution at every greater width, so we can return the maxrea we have found


9/29/23 refresher (my solution):

class Solution:
    import math
    def maxArea(self, height: List[int]) -> int:
        result = 0
        left = 0
        right = len(height) - 1
        while left < right:
            current = (right - left) * min(height[left], height[right])
            result = max(result, current)
            if height[left] < height[right]:
                left += 1
            else:
                right -= 1
        return result

10/8/23 refresher (my solution):

class Solution(object):
    import math
    def maxArea(self, height):
        l = 0
        r = len(height) - 1
        curr = 0
        res = 0
        while l < r:
            curr = min(height[l], height[r]) * (r - l)
            res = max(res, curr)
            if height[l] < height[r]:
                l += 1
            else:
                r -= 1
        return res



