Given an integer array nums, find the 
subarray with the largest sum, and return its sum.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

My Solution:

class Solution:
    import math
    def maxSubArray(self, nums: List[int]) -> int:
        left = 0 #using the sliding window approach
        right = 0
        maxsum = nums[0]
        currsum = 0
        for right in range(len(nums)):
            currsum += nums[right]
            if currsum < 0:
                maxsum = max(maxsum, currsum)
                currsum = 0 #we are trying to nuetralize the currsum 
                right += 1
                left = right
            else:
                maxsum = max(maxsum, currsum)
        return maxsum
  #line 33 should be nums[0] and not 0 because the array may only contain negative values. 
  #line 38 is necessary
