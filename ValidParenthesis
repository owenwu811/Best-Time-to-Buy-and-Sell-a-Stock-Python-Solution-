Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false


Solution: 

class Solution:
    def isValid(self, s: str) -> bool:
        stack = [] 
        opening_brackets = "({["
        closing_brackets = ")}]"
        for char in s:
            if char in opening_brackets:
                stack.append(char)
            elif char in closing_brackets: #if there is not a corresponding opening bracket, and the stack (current characters in s so far) is empty, then there is not a valid parenthesis.
                if not stack:
                    return False
                opening_bracket = stack.pop()
                if opening_brackets.index(opening_bracket) != closing_brackets.index(char):
                    return False
        return not stack #stack is empty, so all symbols are matched, so return True
