Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

 

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).
 

Constraints:

3 <= nums.length <= 500
-1000 <= nums[i] <= 1000
-104 <= target <= 104

Solution:

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        closest_sum = float('inf') #setting closest_sum to infinity so that next turn will always be less than infinity

        for i in range(len(nums) - 2): #i acts as the first pointer starting with index 0 here
            left, right = i + 1, len(nums) - 1
            while left < right:
                three_sum = nums[i] + nums[left] + nums[right]                
                if three_sum == target:
                    return target
                if abs(three_sum - target) < abs(closest_sum - target): #you can do abs(three_sum - target) or abs(target - three_sum) as the values are the same except with flipped signs but abs puts them back as same sign
                    #whichever one has the bigger difference needs to be set to the one with the smaller distance when comparing three_sum to current_sum
                    closest_sum = three_sum #this will always execute on the 1st turn since anything minus target will always be less than infinity minus target
                #closest_sum is the final result after each iteration while threesum is preparing for the next iteration, so we want to compare threesum
                if three_sum < target:
                    left += 1
                else:
                    right -= 1

        return closest_sum
        
        
        #During each iteration, if the current three_sum is closer to the target than the previous closest_sum, closest_sum is updated to hold the value of the current three_sum
        #The three_sum variable, on the other hand, represents the sum of three numbers being considered in each iteration. It is calculated as the sum of nums[i], nums[left], and nums[right] within the nested while loop.


10/7/23 refresher (My Solution - Python3):
class Solution:
    import math
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        closest_sum = math.inf
        for i in range(len(nums) - 2):
            l = i + 1
            r = len(nums) - 1
            while l < r:
                three_sum = nums[i] + nums[l] + nums[r]
                if three_sum == target: # since target is equal to three_sum, it's the anwser
                    return target
                if abs(target - three_sum) < abs(target - closest_sum): # if threesum is smaller than closestsum, than that means closestsum is bigger than threesum, so closestsum is father away from target than threesum is, so update the solution to be threesum since it's now our next closest sum - it works out with negatives too - if the target is negative, the target still stays the same from left to right side, which is the key to why this formula works aka the target is always the number being subtracted from  
                    closest_sum = three_sum
                if three_sum < target: #we want to get as close as we can to target but with the stipulation that you have to be on a valid tile aka value in the list
                    l += 1
                else:
                    r -= 1
        return closest_sum

#3/24/24 refresher:

class Solution:
    import math
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        res = 0 #return the sum of the three integers closest to target when added together
        nums.sort()
        historical = math.inf
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third: 
                threesum = nums[first] + nums[second] + nums[third]
                currentdiff = abs(target - threesum) #which one is closest to historical
                if currentdiff < historical: #always true on 1st turn. < means closer to 
                    historical = currentdiff
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res

#3/24/24 practice refresher again:

class Solution:
    import math
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        res = 0
        nums.sort()
        historical = math.inf
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                difference = abs(target - threesum)
                if difference < historical:
                    historical = difference
                    res = threesum
                elif threesum > target: #compare threesum to target, not difference or historical because we sorted the input array!
                    third -= 1
                else:
                    second += 1
        return res

#3/24/24 refresher again:

from typing import List
import math

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort() #the whole pointer thing only works if the input array is already sorted!!!!
        res = 0
        historical = math.inf
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                difference = abs(target - threesum)
                if difference < historical:
                    historical = difference
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res

#3/25/24:

class Solution:
    import math
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        res = 0
        historical = math.inf
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third: 
                threesum = nums[first] + nums[second] + nums[third]
                difference = abs(target - threesum)
                if difference < historical:
                    historical = difference
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res


#3/26/24:

from typing import List
import math

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        res = 0
        nums.sort()
        historical = math.inf
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                diff = abs(target - threesum)
                if diff < historical:
                    historical = diff
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res

#3/27/24:

from typing import List
import math

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        res = 0 
        nums.sort()
        historical = math.inf
        for first in range(len(nums)): 
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                diff = abs(target - threesum)
                if diff < historical:
                    historical = diff
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res

#3/28/24:

class Solution:
    import math
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        res = 0
        historical = float('inf')
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                diff = abs(target - threesum)
                if diff < historical:
                    historical = diff
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res
                
#4/3/24:

from typing import List
import math

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        res = 0
        historical = math.inf
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                difference = abs(target - threesum)
                if difference < historical:
                    historical = difference
                    res = threesum
                elif threesum > target:
                    third -= 1
                else:
                    second += 1
        return res


#4/8/24:

from typing import List
import math

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        res = 0
        nums.sort()
        historical = math.inf
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                diff = abs(target - threesum)
                if diff < historical:
                    historical = diff
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res

#4/18/24:

class Solution:
    import math
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        res = 0
        historical = math.inf
        nums.sort()
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                diff = abs(target - threesum)
                if diff < historical:
                    historical = diff
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res

#4/28/24 refresher:

class Solution:
    import math
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        historical = math.inf
        res = 0
        for first in range(len(nums)):
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                diff = abs(threesum - target)
                if diff < historical:
                    historical = diff
                    res = threesum
                elif threesum < target: #we are trying to find threesum closest to target, not diff or historical
                    second += 1
                else:
                    third -= 1
        return res


#5/4/24 refresher:

from typing import List
import math

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        res = 0
        historical = math.inf
        nums.sort()
        for first in range(len(nums)): #in this problem, we don't care about duplicates so we don't have to check the 1st pointer for duplicates, so don't just reuse the same template for 3sum problem!
            second = first + 1
            third = len(nums) - 1
            while second < third:
                threesum = nums[first] + nums[second] + nums[third]
                diff = abs(target - threesum)
                if diff < historical:
                    historical = diff
                    res = threesum
                elif threesum < target:
                    second += 1
                else:
                    third -= 1
        return res

