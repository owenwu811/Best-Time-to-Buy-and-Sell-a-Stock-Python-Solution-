Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

 

Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).
 

Constraints:

3 <= nums.length <= 500
-1000 <= nums[i] <= 1000
-104 <= target <= 104

Solution:

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        closest_sum = float('inf') #setting closest_sum to infinity so that next turn will always be less than infinity

        for i in range(len(nums) - 2): #i acts as the first pointer starting with index 0 here
            left = i + 1
            right = len(nums) - 1

            while left < right:
                three_sum = nums[i] + nums[left] + nums[right]
                
                if three_sum == target:
                    return target

                if abs(three_sum - target) < abs(closest_sum - target): #you can do abs(three_sum - target) or abs(target - three_sum) as the values are the same except with flipped signs but abs puts them back as same sign
                    #whichever one has the bigger difference needs to be set to the one with the smaller distance when comparing three_sum to current_sum
                    closest_sum = three_sum #this will always execute on the 1st turn since anything minus target will always be less than infinity minus target
                #closest_sum is the final result after each iteration while threesum is preparing for the next iteration, so we want to compare threesum
                if three_sum < target:
                    left += 1
                else:
                    right -= 1

        return closest_sum
        
        
        #During each iteration, if the current three_sum is closer to the target than the previous closest_sum, closest_sum is updated to hold the value of the current three_sum
        #The three_sum variable, on the other hand, represents the sum of three numbers being considered in each iteration. It is calculated as the sum of nums[i], nums[left], and nums[right] within the nested while loop.


